//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MixItUp.Base {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class OverlayResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OverlayResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MixItUp.Base.OverlayResources", typeof(OverlayResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @charset &quot;UTF-8&quot;;/*!
        /// * animate.css - https://animate.style/
        /// * Version - 4.1.1
        /// * Licensed under the MIT license - http://opensource.org/licenses/MIT
        /// *
        /// * Copyright (c) 2020 Animate.css
        /// */:root{--animate-duration:1s;--animate-delay:1s;--animate-repeat:1}.animate__animated{-webkit-animation-duration:1s;animation-duration:1s;-webkit-animation-duration:var(--animate-duration);animation-duration:var(--animate-duration);-webkit-animation-fill-mode:both;animation-fill-mode:both}.animate__animated.animate [rest of string was truncated]&quot;;.
        /// </summary>
        public static string animateCSS {
            get {
                return ResourceManager.GetString("animateCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @charset &quot;UTF-8&quot;;/*!
        /// * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
        /// * Copyright 2011-2022 The Bootstrap Authors
        /// * Copyright 2011-2022 Twitter, Inc.
        /// * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
        /// */:root{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-black:#000;--bs-white:#fff;--bs-gray:#6c757d;--bs-gray-dark:#343a40;--bs [rest of string was truncated]&quot;;.
        /// </summary>
        public static string bootstrapCSS {
            get {
                return ResourceManager.GetString("bootstrapCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        ///  * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
        ///  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
        ///  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
        ///  */
        ///!function(t,e){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=e(require(&quot;@popperjs/core&quot;)):&quot;function&quot;==typeof define&amp;&amp;define.amd?define([&quot;@popperjs/core&quot;],e):(t=&quot;undefined&quot;!=typeof globalThis?globalThis:t||self).bootstrap=e(t.Popper)}(this,(fu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string bootstrapJS {
            get {
                return ResourceManager.GetString("bootstrapJS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */
        ///!function(e,t){&quot;use strict&quot;;&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return t(e)}:t(e)}(&quot;undefined&quot;!=typeof window?window:this,function(C,e){&quot;use strict&quot;;var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string jqueryJS {
            get {
                return ResourceManager.GetString("jqueryJS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to animateCSS(document.getElementById(&apos;{AnimationElementID}&apos;), &apos;{AnimateCSSAnimationName}&apos;).then((message) =&gt; {
        ///    {PostAnimation}
        ///});.
        /// </summary>
        public static string OverlayAnimateCSSJavascript {
            get {
                return ResourceManager.GetString("OverlayAnimateCSSJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///    width: {ItemWidth};
        ///    {FullHeight}
        ///}
        ///
        ///.item {
        ///    position: relative;
        ///    border-style: solid;
        ///    border-width: 5px;
        ///    border-color: {BorderColor};
        ///    background-color: {BackgroundColor};
        ///    width: {ItemWidth};
        ///    {IndividualHeight}
        ///}
        ///
        ///.message {
        ///    padding: 10px;
        ///    margin: auto;
        ///}
        ///
        ///.messagebadge {
        ///    vertical-align: middle;
        ///    padding-right: 2px;
        ///    width: auto;
        ///    height: {FontSize}px;
        ///}
        ///
        ///.messageavatar {
        ///    vertical-align: middle;
        ///    padding-right [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayChatDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayChatDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot;&gt;
        ///
        ///&lt;/div&gt;
        ///
        ///&lt;template id=&quot;item&quot;&gt;
        ///    &lt;div class=&quot;item&quot;&gt;
        ///        &lt;p class=&quot;message&quot;&gt;&lt;/p&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;messagebadge&quot;&gt;
        ///    &lt;img class=&quot;messagebadge&quot; /&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;messageavatar&quot;&gt;
        ///    &lt;img class=&quot;messageavatar&quot; /&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;messageusername&quot;&gt;
        ///    &lt;span class=&quot;messageusername&quot;&gt;&lt;/span&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;messagetext&quot;&gt;
        ///    &lt;span class=&quot;messagetext&quot;&gt;&lt;/span&gt;
        ///&lt;/template&gt;
        ///
        ///&lt;template id=&quot;messageemote&quot;&gt;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayChatDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayChatDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function add(user, messageParts)
        ///{
        ///    var list = document.getElementById(&quot;list&quot;);
        ///
        ///    if ({ShowMaxMessagesOnly})
        ///    {
        ///        if (list.childElementCount &gt; {MaxToShow})
        ///        {
        ///            removeOldest();
        ///        }
        ///    }
        ///
        ///    var itemTemplate = document.querySelector(&quot;#item&quot;);
        ///    var messageBadgeTemplate = document.querySelector(&quot;#messagebadge&quot;);
        ///    var messageAvatarTemplate = document.querySelector(&quot;#messageavatar&quot;);
        ///    var messageUsernameTemplate = document.querySelector(&quot;#messageuse [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayChatDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayChatDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .list {
        ///    width: {ItemWidth};
        ///    {FullHeight}
        ///}
        ///
        ///.item {
        ///    position: relative;
        ///    border-style: solid;
        ///    border-width: 5px;
        ///    border-color: {BorderColor};
        ///    background-color: {BackgroundColor};
        ///    width: {ItemWidth};
        ///    {IndividualHeight}
        ///}
        ///
        ///.message {
        ///    padding: 10px;
        ///    margin: auto;
        ///}
        ///
        ///.messagebadge {
        ///    vertical-align: middle;
        ///    padding-right: 2px;
        ///    width: auto;
        ///    height: {FontSize}px;
        ///}
        ///
        ///.messageavatar {
        ///    vertical-align: middle;
        ///    padding-right [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEventListDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayEventListDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;list&quot; class=&quot;list&quot;&gt;
        ///
        ///&lt;/div&gt;
        ///
        ///&lt;template id=&quot;item&quot;&gt;
        ///    &lt;div class=&quot;item&quot;&gt;
        ///        &lt;p class=&quot;eventtype&quot;&gt;{EventType}&lt;/p&gt;
        ///        &lt;p class=&quot;details&quot;&gt;{Details}&lt;/p&gt;
        ///        &lt;p class=&quot;subdetails&quot;&gt;{SubDetails}&lt;/p&gt;
        ///    &lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayEventListDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayEventListDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function add(eventType, details, subdetails)
        ///{
        ///    var list = document.getElementById(&quot;list&quot;);
        ///
        ///    if (list.childElementCount &gt; {MaxToShow}) {
        ///        removeOldest();
        ///    }
        ///
        ///    var itemTemplate = document.querySelector(&quot;#item&quot;);
        ///    const item = itemTemplate.content.cloneNode(true);
        ///    
        ///    var eventTypeElement = item.querySelector(&quot;.eventtype&quot;);
        ///    eventTypeElement.innerHTML = eventType;
        ///
        ///    var detailsElement = item.querySelector(&quot;.details&quot;);
        ///    detailsElement.innerHTML = details;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayEventListDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayEventListDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .mainContainer {
        ///  width: {Width};
        ///}
        ///
        ///.goalName {
        ///  text-align: center;
        ///  margin-bottom: 5px;
        ///}
        ///
        ///.goalContainer {
        ///  position: relative;
        ///  border-style: solid;
        ///  border-width: 5px;
        ///  border-color: {BorderColor};
        ///  height: {Height};
        ///}
        ///
        ///.goalBar {
        ///  background-color: {GoalColor};
        ///  height: 100%;
        ///}
        ///
        ///.goalBarCompleted {
        ///  background-color: {ProgressColor};
        ///  height: 100%;
        ///  width: 50%;
        ///}
        ///
        ///.goalBarText {
        ///  position: absolute;
        ///  top: 50%;
        ///  left: 50%;
        ///  transform: translate(-50%, -5 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGoalDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayGoalDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div class=&quot;mainContainer&quot;&gt;
        ///  &lt;div class=&quot;goalName&quot;&gt;
        ///    &lt;span id=&quot;goalName&quot; class=&quot;text&quot;&gt;&lt;/span&gt;
        ///  &lt;/div&gt;
        ///  
        ///  &lt;div class=&quot;goalContainer&quot;&gt;
        ///    &lt;div class=&quot;goalBar&quot;&gt;
        ///      &lt;div id=&quot;goalBarCompleted&quot; class=&quot;goalBarCompleted&quot; /&gt;
        ///    &lt;/div&gt;
        ///
        ///    &lt;div class=&quot;goalBarText&quot;&gt;
        ///      &lt;span class=&quot;text&quot;&gt;
        ///        &lt;span id=&quot;goalAmount&quot;&gt;&lt;/span&gt;
        ///        &lt;span&gt; / &lt;/span&gt;
        ///        &lt;span id=&quot;goalMaxAmount&quot;&gt;&lt;/span&gt;
        ///      &lt;/span&gt;
        ///    &lt;/div&gt;
        ///  &lt;/div&gt;
        ///  
        ///  &lt;div class=&quot;goalEnd&quot;&gt;
        ///    &lt;span id=&quot;goalEnd&quot; class=&quot;te [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGoalDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayGoalDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let goalName = document.getElementById(&quot;goalName&quot;);
        ///let goalEnd = document.getElementById(&quot;goalEnd&quot;);
        ///let goalBarCompleted = document.getElementById(&quot;goalBarCompleted&quot;);
        ///let goalAmount = document.getElementById(&quot;goalAmount&quot;);
        ///let goalMaxAmount = document.getElementById(&quot;goalMaxAmount&quot;);
        ///
        ///function update(data)
        ///{
        ///  goalAmount.innerHTML = data.GoalAmount;
        ///  adjustProgress(data);
        ///  {ProgressOccurredAnimation}
        ///}
        ///
        ///function complete(data)
        ///{
        ///  update({
        ///    &quot;GoalAmount&quot;: goalMaxAmount.innerHTML,
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayGoalDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayGoalDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .image {
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayImageDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayImageDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;img id=&quot;image&quot; class=&quot;image&quot; src=&quot;{FilePath}&quot; /&gt;.
        /// </summary>
        public static string OverlayImageDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayImageDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to maindiv.style.visibility=&apos;hidden&apos;;
        ///sendParentMessage({ Type: &quot;Remove&quot;, ID: &quot;{ID}&quot; });.
        /// </summary>
        public static string OverlayItemHideAndSendParentMessageRemoveJavascript {
            get {
                return ResourceManager.GetString("OverlayItemHideAndSendParentMessageRemoveJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;Mix It Up - Overlay&lt;/title&gt;
        ///
        ///    &lt;script src=&quot;jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;
        ///
        ///    &lt;script src=&quot;video.min.js&quot;&gt;&lt;/script&gt;
        ///
        ///    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;animate.min.css&quot;&gt;
        ///
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///        {CSS}
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body style=&quot;background-color: transparent; overflow: hidden; position: absolute; width: 100%; max-width: 100%; min-width: 100 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayItemIFrameHTML {
            get {
                return ResourceManager.GetString("OverlayItemIFrameHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to addLabelDisplay(&quot;{Type}&quot;, &quot;{Format}&quot;);.
        /// </summary>
        public static string OverlayLabelAddJavascript {
            get {
                return ResourceManager.GetString("OverlayLabelAddJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $labelamount.
        /// </summary>
        public static string OverlayLabelAmountDefaultFormat {
            get {
                return ResourceManager.GetString("OverlayLabelAmountDefaultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .labelDisplay
        ///{
        ///    position: absolute;
        ///    transform: translate({XTranslation}%, {YTranslation}%);
        ///    width: {Width};
        ///}.
        /// </summary>
        public static string OverlayLabelDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayLabelDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;labels&quot;&gt;&lt;/div&gt;
        ///
        ///&lt;template id=&quot;labeldisplay&quot;&gt;
        ///    &lt;div class=&quot;text labelDisplay&quot;&gt;&lt;/div&gt;
        ///&lt;/template&gt;.
        /// </summary>
        public static string OverlayLabelDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayLabelDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var labels = document.getElementById(&quot;labels&quot;);
        ///
        ///{LabelAdds}
        ///
        ///var displaySettings = &quot;{DisplaySetting}&quot;;
        ///var displayRotationSeconds = {DisplayRotationSeconds};
        ///var displayRotationIndex = 0;
        ///
        ///if (displaySettings == &quot;RotatingDisplays&quot;)
        ///{
        ///    rotateLabelDisplay();
        ///}
        ///else
        ///{
        ///    labels.children[0].style.visibility = &quot;visible&quot;;
        ///}
        ///
        ///function addLabelDisplay(type, format)
        ///{
        ///    var labelDisplayTemplate = document.getElementById(&quot;labeldisplay&quot;);
        ///    const labelDisplay = labelDisplayTemplate.content [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayLabelDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayLabelDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $userdisplayname - $labelamount.
        /// </summary>
        public static string OverlayLabelUsernameAmountDefaultFormat {
            get {
                return ResourceManager.GetString("OverlayLabelUsernameAmountDefaultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $userdisplayname.
        /// </summary>
        public static string OverlayLabelUsernameDefaultFormat {
            get {
                return ResourceManager.GetString("OverlayLabelUsernameDefaultFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///
        ///&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot; /&gt;
        ///    &lt;title&gt;Mix It Up - Overlay&lt;/title&gt;
        ///
        ///    &lt;script&gt;
        ///        var connection;
        ///        var isDebug = false;
        ///
        ///        function openWebsocketConnection(path) {
        ///            openWebsocketConnectionWithAddressPort(window.location.hostname, window.location.port, path);
        ///        }
        ///
        ///        function openWebsocketConnectionWithAddressPort(address, port, path) {
        ///            try {
        ///                va [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayMainHTML {
            get {
                return ResourceManager.GetString("OverlayMainHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var additionalTime = 0;
        ///
        ///function timerLoop(totalSeconds, displayFormat)
        ///{
        ///    totalSeconds += additionalTime;
        ///    additionalTime = 0;
        ///
        ///    var text = displayFormat;
        ///
        ///    var seconds = totalSeconds % 60;
        ///    if (seconds &lt; 10) { seconds = &quot;0&quot; + seconds }
        ///    text = text.replace(&quot;SS&quot;, totalSeconds);
        ///    text = text.replace(&quot;ss&quot;, seconds);
        ///
        ///    var totalMinutes = Math.floor(totalSeconds / 60);
        ///    var minutes = totalMinutes % 60;
        ///    if (minutes &lt; 10) { minutes = &quot;0&quot; + minutes }
        ///    text = tex [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayPersistentTimerDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayPersistentTimerDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .maindiv {
        ///    position: absolute;
        ///    width: 100%;
        ///    max-width: 100%;
        ///    min-width: 100%;
        ///    height: 100%;
        ///    max-height: 100%;
        ///    min-height: 100%;
        ///    margin: 0px;
        ///    z-index: {Layer};
        ///}
        ///
        ///.contentdiv {
        ///    position: absolute;
        ///    margin: 0px;
        ///    left: {XPosition}{PositionType};
        ///    top: {YPosition}{PositionType};
        ///    transform: translate({XTranslation}%, {YTranslation}%);
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayPositionedItemDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayPositionedItemDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;maindiv&quot; class=&quot;maindiv&quot;&gt;
        ///&lt;div id=&quot;contentdiv&quot; class=&quot;contentdiv&quot;&gt;
        ///
        ///{InnerHTML}
        ///
        ///&lt;/div&gt;
        ///&lt;/div&gt;.
        /// </summary>
        public static string OverlayPositionedItemDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayPositionedItemDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .mainContainer {
        ///  display: flex;
        ///  border-style: solid;
        ///  border-width: 5px;
        ///  border-color: {BorderColor};
        ///  background-color: {BackgroundColor};
        ///  width: 450px;
        ///  height: 125px;
        ///}
        ///
        ///.image {
        ///  width: 100%;
        ///  height: auto;
        ///  display: block;
        ///  margin: 0;
        ///}
        ///
        ///.healthBarDamage {
        ///  background-color: {DamageColor};
        ///  height: 100%;
        ///}
        ///
        ///.healthRemainingBar {
        ///  background-color: {HealthColor};
        ///  height: 100%;
        ///}
        ///
        ///.imageContainer {
        ///  flex: 1;
        ///  display: flex;
        ///  align-items: center;
        ///  jus [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayStreamBossDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayStreamBossDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div class=&quot;mainContainer&quot;&gt;
        ///  &lt;div class=&quot;imageContainer&quot;&gt;
        ///    &lt;img id=&quot;bossImage&quot; class=&quot;image&quot;&gt;
        ///  &lt;/div&gt;
        ///  
        ///  &lt;div class=&quot;infoContainer&quot;&gt;
        ///    &lt;div class=&quot;infoContainerVerticalSplit&quot;&gt;
        ///      &lt;div class=&quot;verticalFlexAuto&quot;&gt;
        ///        &lt;div style=&quot;display: flex;&quot;&gt;
        ///          &lt;span id=&quot;bossName&quot; class=&quot;text flexAuto&quot;&gt;&lt;/span&gt;
        ///
        ///          &lt;span class=&quot;text&quot;&gt;
        ///            &lt;span id=&quot;bossHealth&quot;&gt;&lt;/span&gt;
        ///            &lt;span&gt; / &lt;/span&gt;
        ///            &lt;span id=&quot;bossMaxHealth&quot;&gt;&lt;/span&gt;
        ///          &lt;/span&gt;
        ///        &lt;/di [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayStreamBossDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayStreamBossDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let bossImage = document.getElementById(&quot;bossImage&quot;);
        ///let bossName = document.getElementById(&quot;bossName&quot;);
        ///let bossHealth = document.getElementById(&quot;bossHealth&quot;);
        ///let bossMaxHealth = document.getElementById(&quot;bossMaxHealth&quot;);
        ///let bossHealthBarRemaining = document.getElementById(&quot;bossHealthBarRemaining&quot;);
        ///
        ///function damage(data)
        ///{
        ///    bossHealth.innerHTML = data.BossHealth;
        ///    adjustProgress(data);
        ///    {DamageAnimation}
        ///}
        ///
        ///function heal(data)
        ///{
        ///    bossHealth.innerHTML = data.BossHealth;
        ///    ad [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayStreamBossDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayStreamBossDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .text {
        ///    font-size: {FontSize}px;
        ///    color: {FontColor};
        ///    font-family: &apos;{FontFamily}&apos;;
        ///    font-weight: {FontWeight};
        ///    text-decoration: {TextDecoration};
        ///    font-style: {FontStyle};
        ///    text-align: {TextAlignment};
        ///    text-shadow: {ShadowColor};
        ///    margin-block-start: 0px;
        ///    margin-block-end: 0px;
        ///    margin-inline-start: 0px;
        ///    margin-inline-end: 0px;
        ///}.
        /// </summary>
        public static string OverlayTextDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayTextDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p id=&quot;text&quot; class=&quot;text&quot;&gt;
        ///    {Text}
        ///&lt;/p&gt;.
        /// </summary>
        public static string OverlayTextDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTextDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to setTimeout(function () {
        ///    {PostTimeout}
        ///}, {MillisecondTiming});.
        /// </summary>
        public static string OverlayTimeoutWrapperJavascript {
            get {
                return ResourceManager.GetString("OverlayTimeoutWrapperJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p id=&quot;text&quot; class=&quot;text&quot;&gt;
        ///    {Text}
        ///&lt;/p&gt;.
        /// </summary>
        public static string OverlayTimerDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTimerDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function timerLoop(totalSeconds, endingSeconds, displayFormat)
        ///{
        ///    var text = displayFormat;
        ///
        ///    var seconds = totalSeconds % 60;
        ///    if (seconds &lt; 10) { seconds = &quot;0&quot; + seconds }
        ///    text = text.replace(&quot;SS&quot;, totalSeconds);
        ///    text = text.replace(&quot;ss&quot;, seconds);
        ///
        ///    var totalMinutes = Math.floor(totalSeconds / 60);
        ///    var minutes = totalMinutes % 60;
        ///    if (minutes &lt; 10) { minutes = &quot;0&quot; + minutes }
        ///    text = text.replace(&quot;MM&quot;, totalMinutes);
        ///    text = text.replace(&quot;mm&quot;, minutes);
        ///
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayTimerDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayTimerDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .clip {
        ///    width: {ClipWidth};
        ///    height: {ClipHeight};
        ///    border: none;
        ///    margin: 0;
        ///    padding: 0;
        ///}.
        /// </summary>
        public static string OverlayTwitchClipEmbedDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayTwitchClipEmbedDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;iframe id=&quot;clip&quot; class=&quot;clip&quot;&gt;&lt;/iframe&gt;.
        /// </summary>
        public static string OverlayTwitchClipEmbedDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTwitchClipEmbedDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var clip = document.getElementById(&quot;clip&quot;);
        ///clip.setAttribute(&quot;src&quot;, &quot;https://clips.twitch.tv/embed?parent=&quot; + window.location.hostname + &quot;&amp;autoplay=true&amp;muted=false&amp;clip={ClipID}&quot;);
        ///
        ///.
        /// </summary>
        public static string OverlayTwitchClipEmbedDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayTwitchClipEmbedDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .video {
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayTwitchClipVideoDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayTwitchClipVideoDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;video id=&quot;video&quot; class=&quot;video&quot; onloadstart=&quot;this.volume={Volume}&quot; allow=&quot;autoplay; encrypted-media&quot; autoplay&gt;
        ///    &lt;source src=&quot;{ClipDirectLink}&quot; /&gt;
        ///&lt;/video&gt;.
        /// </summary>
        public static string OverlayTwitchClipVideoDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayTwitchClipVideoDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .video {
        ///    width: {Width};
        ///    height: {Height};
        ///}.
        /// </summary>
        public static string OverlayVideoDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayVideoDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;video id=&quot;video&quot; class=&quot;video&quot; onloadstart=&quot;this.volume={Volume}&quot; allow=&quot;autoplay; encrypted-media&quot; autoplay {Loop}&gt;
        ///    &lt;source src=&quot;{FilePath}&quot; /&gt;
        ///&lt;/video&gt;.
        /// </summary>
        public static string OverlayVideoDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayVideoDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var video = document.getElementById(&quot;video&quot;);
        ///video.addEventListener(&quot;ended&quot;, (event) =&gt; {
        ///    {PostEvent}
        ///});.
        /// </summary>
        public static string OverlayVideoNoDurationJavascript {
            get {
                return ResourceManager.GetString("OverlayVideoNoDurationJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;iframe frameborder=&quot;0&quot; width=&quot;{Width}&quot; height=&quot;{Height}&quot; src=&quot;{URL}&quot; /&gt;.
        /// </summary>
        public static string OverlayWebPageDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayWebPageDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .youtubeVideo {
        ///
        ///}.
        /// </summary>
        public static string OverlayYouTubeDefaultCSS {
            get {
                return ResourceManager.GetString("OverlayYouTubeDefaultCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div id=&quot;youtube-player&quot; class=&quot;youtubeVideo&quot; /&gt;.
        /// </summary>
        public static string OverlayYouTubeDefaultHTML {
            get {
                return ResourceManager.GetString("OverlayYouTubeDefaultHTML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function onYouTubeIframeAPIReady() {
        ///    var youtubeVideoPlayer = new YT.Player(&quot;youtube-player&quot;, {
        ///        height: {HeightNumber},
        ///        width: {WidthNumber},
        ///        videoId: &apos;{VideoID}&apos;,
        ///        playerVars: { &apos;controls&apos;: 0, &apos;modestbranding&apos;: 1, &apos;start&apos;: {StartTime} },
        ///        events: {
        ///            &apos;onReady&apos;: function () {
        ///                youtubeVideoPlayer.setVolume({Volume});
        ///                youtubeVideoPlayer.setLoop(false);
        ///                youtubeVideoPlayer.frameBorder = 0;
        ///              [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OverlayYouTubeDefaultJavascript {
            get {
                return ResourceManager.GetString("OverlayYouTubeDefaultJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to event.target.destroy();.
        /// </summary>
        public static string OverlayYouTubeIFrameDestroyJavascript {
            get {
                return ResourceManager.GetString("OverlayYouTubeIFrameDestroyJavascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @charset &quot;UTF-8&quot;;
        ///.vjs-modal-dialog .vjs-modal-dialog-content, .video-js .vjs-modal-dialog, .vjs-button &gt; .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {
        ///  position: absolute;
        ///  top: 0;
        ///  left: 0;
        ///  width: 100%;
        ///  height: 100%;
        ///}
        ///
        ///.vjs-button &gt; .vjs-icon-placeholder:before, .video-js .vjs-big-play-button .vjs-icon-placeholder:before {
        ///  text-align: center;
        ///}
        ///
        ///@font-face {
        ///  font-family: VideoJS;
        ///  src: url(data:application/font-woff;charset=utf-8;ba [rest of string was truncated]&quot;;.
        /// </summary>
        public static string videoCSS {
            get {
                return ResourceManager.GetString("videoCSS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @license
        /// * Video.js 7.19.2 &lt;http://videojs.com/&gt;
        /// * Copyright Brightcove, Inc. &lt;https://www.brightcove.com/&gt;
        /// * Available under Apache License Version 2.0
        /// * &lt;https://github.com/videojs/video.js/blob/main/LICENSE&gt;
        /// *
        /// * Includes vtt.js &lt;https://github.com/mozilla/vtt.js&gt;
        /// * Available under Apache License Version 2.0
        /// * &lt;https://github.com/mozilla/vtt.js/blob/main/LICENSE&gt;
        /// */
        ///!function(e,t){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=t():&quot;function&quot;==typeof define&amp;&amp; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string videoJS {
            get {
                return ResourceManager.GetString("videoJS", resourceCulture);
            }
        }
    }
}
