<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OverlayAnimateCSSJavascript" xml:space="preserve">
    <value>animateCSS(maindiv, '{AnimateCSSAnimationName}');</value>
  </data>
  <data name="OverlayAnimateCSSThenJavascript" xml:space="preserve">
    <value>animateCSS(maindiv, '{AnimateCSSAnimationName}').then((message) =&gt; {
    {PostAnimation}
});</value>
  </data>
  <data name="OverlayAnimationTimedWrapperJavascript" xml:space="preserve">
    <value>setTimeout(function () {
    {Animation}
}, {MillisecondTiming});</value>
  </data>
  <data name="OverlayChatDefaultCSS" xml:space="preserve">
    <value>.list {
    width: {ItemWidth};
    {FullHeight}
}

.item {
    position: relative;
    border-style: solid;
    border-width: 5px;
    border-color: {BorderColor};
    background-color: {BackgroundColor};
    width: {ItemWidth};
    {IndividualHeight}
}

.message {
    padding: 10px;
    margin: auto;
}

.messagebadge {
    vertical-align: middle;
    padding-right: 2px;
    width: auto;
    height: {FontSize}px;
}

.messageavatar {
    vertical-align: middle;
    padding-right: 2px;
    width: auto;
    height: {FontSize}px;
}

.messageusername {
    vertical-align: middle;
    word-wrap: break-word;
    font-size: {FontSize}px;
    font-family: '{FontFamily}';
    font-weight: bold;
    text-decoration: {TextDecoration};
    font-style: {FontStyle};
    text-shadow: {Shadow};
}

.messagetext {
    vertical-align: middle;
    margin-left: 10px;
    word-wrap: break-word;
    font-weight: bold;
    font-size: {FontSize}px;
    color: {FontColor};
    font-family: '{FontFamily}';
    font-weight: {FontWeight};
    text-decoration: {TextDecoration};
    font-style: {FontStyle};
    text-shadow: {Shadow};
    margin-block-start: 0px;
    margin-block-end: 0px;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
}

.messageemote {
   vertical-align: middle;
   margin-left: 10px;
   width: auto;
   height: {TEXT_SIZE}px;
}</value>
  </data>
  <data name="OverlayChatDefaultHTML" xml:space="preserve">
    <value>&lt;div id="list" class="list"&gt;

&lt;/div&gt;

&lt;template id="item"&gt;
    &lt;div class="item"&gt;
        &lt;p class="message"&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;template id="messagebadge"&gt;
    &lt;img class="messagebadge" /&gt;
&lt;/template&gt;

&lt;template id="messageavatar"&gt;
    &lt;img class="messageavatar" /&gt;
&lt;/template&gt;

&lt;template id="messageusername"&gt;
    &lt;span class="messageusername"&gt;&lt;/span&gt;
&lt;/template&gt;

&lt;template id="messagetext"&gt;
    &lt;span class="messagetext"&gt;&lt;/span&gt;
&lt;/template&gt;

&lt;template id="messageemote"&gt;
    &lt;img class="messageemote" /&gt;
&lt;/template&gt;</value>
  </data>
  <data name="OverlayChatDefaultJavascript" xml:space="preserve">
    <value>function add(user, messageParts)
{
    var list = document.getElementById("list");

    if ({ShowMaxMessagesOnly})
    {
        if (list.childElementCount &gt; {MaxToShow})
        {
            removeOldest();
        }
    }

    var itemTemplate = document.querySelector("#item");
    var messageBadgeTemplate = document.querySelector("#messagebadge");
    var messageAvatarTemplate = document.querySelector("#messageavatar");
    var messageUsernameTemplate = document.querySelector("#messageusername");
    var messageTextTemplate = document.querySelector("#messagetext");
    var messageEmoteTemplate = document.querySelector("#messageemote");
    
    const item = itemTemplate.content.cloneNode(true);
    var messageElement = item.querySelector(".message");
    
    const messageRoleBadge = messageBadgeTemplate.content.cloneNode(true);
    messageRoleBadge.src = user.PlatformRoleBadgeLink;
    messageElement.appendChild(messageRoleBadge);
    
    const messageSubBadge = messageBadgeTemplate.content.cloneNode(true);
    messageSubBadge.src = user.PlatformSubscriberBadgeLink;
    messageElement.appendChild(messageSubBadge);
    
    const messageAvatar = messageAvatarTemplate.content.cloneNode(true);
    messageAvatar.src = user.AvatarLink;
    messageElement.appendChild(messageAvatar);
    
    const messageUsername = messageUsernameTemplate.content.cloneNode(true);
    messageUsername.style.color = user.Color;
    messageUsername.innerHTML = user.DisplayName;
    messageElement.appendChild(messageUsername);
    
    messageParts.forEach(messagePart =&gt;
    {
        if (messagePart.Type === 'text')
        {
            const messageText = messageTextTemplate.content.cloneNode(true);
            messageUsername.innerHTML = messagePart.Text;
            messageElement.appendChild(messageText);
        }
        else if (messagePart.Type === 'image')
        {
            const messageEmote = messageEmoteTemplate.content.cloneNode(true);
            messageEmote.src = messagePart.URL;
            messageElement.appendChild(messageEmote);      
        }
    });

    list.appendChild(item);
}

function removeOldest()
{
    var list = document.getElementById("list");
    list.removeChild(list.firstElementChild);
}</value>
  </data>
  <data name="OverlayEventListDefaultCSS" xml:space="preserve">
    <value>.list {
    width: {ItemWidth};
    {FullHeight}
}

.item {
    position: relative;
    border-style: solid;
    border-width: 5px;
    border-color: {BorderColor};
    background-color: {BackgroundColor};
    width: {ItemWidth};
    {IndividualHeight}
}

.message {
    padding: 10px;
    margin: auto;
}

.messagebadge {
    vertical-align: middle;
    padding-right: 2px;
    width: auto;
    height: {FontSize}px;
}

.messageavatar {
    vertical-align: middle;
    padding-right: 2px;
    width: auto;
    height: {FontSize}px;
}

.messageusername {
    vertical-align: middle;
    word-wrap: break-word;
    font-size: {FontSize}px;
    font-family: '{FontFamily}';
    font-weight: bold;
    text-decoration: {TextDecoration};
    font-style: {FontStyle};
    text-shadow: {Shadow};
    margin-block-start: 0px;
    margin-block-end: 0px;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
}

.messagetext {
    vertical-align: middle;
    margin-left: 10px;
    word-wrap: break-word;
    font-weight: bold;
    font-size: {FontSize}px;
    color: {FontColor};
    font-family: '{FontFamily}';
    font-weight: {FontWeight};
    text-decoration: {TextDecoration};
    font-style: {FontStyle};
    text-shadow: {Shadow};
    margin-block-start: 0px;
    margin-block-end: 0px;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
}

.messageemote {
   vertical-align: middle;
   margin-left: 10px;
   width: auto;
   height: {FontSize}px;
}</value>
  </data>
  <data name="OverlayEventListDefaultHTML" xml:space="preserve">
    <value>&lt;div id="list" class="list"&gt;

&lt;/div&gt;

&lt;template id="item"&gt;
    &lt;div class="item"&gt;
        &lt;p class="eventtype"&gt;{EventType}&lt;/p&gt;
        &lt;p class="details"&gt;{Details}&lt;/p&gt;
        &lt;p class="subdetails"&gt;{SubDetails}&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;</value>
  </data>
  <data name="OverlayEventListDefaultJavascript" xml:space="preserve">
    <value>function add(eventType, details, subdetails)
{
    var list = document.getElementById("list");

    if (list.childElementCount &gt; {MaxToShow}) {
        removeOldest();
    }

    var itemTemplate = document.querySelector("#item");
    const item = itemTemplate.content.cloneNode(true);
    
    var eventTypeElement = item.querySelector(".eventtype");
    eventTypeElement.innerHTML = eventType;

    var detailsElement = item.querySelector(".details");
    detailsElement.innerHTML = details;
    
    var subdetailsElement = item.querySelector(".subdetails");
    subdetailsElement.innerHTML = subdetails;

    list.appendChild(item);
}

function removeOldest()
{
    var list = document.getElementById("list");
    list.removeChild(list.firstElementChild);
}</value>
  </data>
  <data name="OverlayGoalDefaultCSS" xml:space="preserve">
    <value>.background
{
    position: absolute;
    background-color: {BackgroundColor};
    width: {Width}px;
    height: {Height}px;
}

.progress
{
    position: absolute;
    background-color: {ProgressColor};
    height: {Height}px;
}

.text {
    position: absolute;
    font-size: {FontSize}px;
    color: {FontColor};
    font-family: '{FontFamily}';
    font-weight: {FontWeight};
    text-decoration: {TextDecoration};
    font-style: {FontStyle};
    text-align: {TextAlignment};
    text-shadow: {Shadow};
    left: 50%;
    top: 50%;
    margin: auto;
    transform: translate(-50%, -50%);
    margin-block-start: 0px;
    margin-block-end: 0px;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
}</value>
  </data>
  <data name="OverlayGoalDefaultHTML" xml:space="preserve">
    <value>&lt;div class="background"&gt;
  &lt;div id="progress" class="progress" /&gt;
&lt;/div&gt;
&lt;p id="text" class="text" /&gt;</value>
  </data>
  <data name="OverlayGoalDefaultJavascript" xml:space="preserve">
    <value>function update(amount, goal, width)
{
    var percentage = (amount / goal)

    var textElement = document.getElementById("text");
    if (textElement != null) {
        textElement.innerHTML = amount + " (" + Math.round(percentage * 100) + "%)"; 
    }
    
    var progressElement = document.getElementById("progress");
    if (progressElement != null) {
        progressElement.style.width = Math.min(Math.round(percentage * width), width) + "px";
    }
}

update({CurrentAmount}, {GoalAmount}, {Width});</value>
  </data>
  <data name="OverlayIFrameSendParentMessageRemove" xml:space="preserve">
    <value>maindiv.style.visibility='hidden';
sendParentMessage({ Type: "Remove", ID: "{ID}" });</value>
  </data>
  <data name="OverlayIFrameTemplate" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;

&lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;Mix It Up - Overlay&lt;/title&gt;

    &lt;script src="jquery-3.6.0.min.js"&gt;&lt;/script&gt;

    &lt;script src="video.min.js"&gt;&lt;/script&gt;

    &lt;link rel="stylesheet" type="text/css" href="animate.min.css"&gt;

    &lt;style type="text/css"&gt;
        {CSS}
    &lt;/style&gt;
&lt;/head&gt;
&lt;body style="background-color: transparent; overflow: hidden; position: absolute; width: 100%; max-width: 100%; min-width: 100%; height: 100%; max-height: 100%; min-height: 100%; margin: 0px;"&gt;

    {HTML}

    &lt;script&gt;
        var maindiv = document.getElementById("maindiv");
        
        function sendParentMessage(obj) {
            window.top.postMessage(JSON.stringify(obj), '*');
        }
        
        const animateCSS = (element, animation, prefix = 'animate__') =&gt;
            // We create a Promise and return it
            new Promise((resolve, reject) =&gt; {
                if (animation != null &amp;&amp; animation) {
                    const animationName = `${prefix}${animation}`;

                    element.classList.add(`${prefix}animated`, animationName);

                    // When the animation ends, we clean the classes and resolve the Promise
                    function handleAnimationEnd(event) {
                        event.stopPropagation();
                        element.classList.remove(`${prefix}animated`, animationName);
                        resolve('Animation ended');
                    }

                    element.addEventListener('animationend', handleAnimationEnd, { once: true });
                }
                else {
                    resolve('Animation ended');
                }
            });
        
        {BasicAnimations}
        
        {Javascript}
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="OverlayImageDefaultCSS" xml:space="preserve">
    <value>.image {
    width: {Width};
    height: {Height};
}</value>
  </data>
  <data name="OverlayImageDefaultHTML" xml:space="preserve">
    <value>&lt;img id="image" class="image" src="{FilePath}" /&gt;</value>
  </data>
  <data name="OverlayLabelAmountDefaultHTML" xml:space="preserve">
    <value>&lt;p id="amount" class="text"&gt;&lt;/p&gt;</value>
  </data>
  <data name="OverlayLabelDefaultJavascript" xml:space="preserve">
    <value>function update(data)
{
    var usernameElement = document.getElementById("username");
    if (usernameElement != null) {
        usernameElement.innerHTML = data.Username;
    }
    
    var amountElement = document.getElementById("amount");
    if (amountElement != null) {
        amountElement.innerHTML = data.Amount;
    }
}

update({Username: '{Username}', Amount: {Amount}})</value>
  </data>
  <data name="OverlayLabelUsernameAmountDefaultHTML" xml:space="preserve">
    <value>&lt;p id="username" class="text"&gt;&lt;/p&gt;
 - 
&lt;p id="amount" class="text"&gt;&lt;/p&gt;</value>
  </data>
  <data name="OverlayLabelUsernameDefaultHTML" xml:space="preserve">
    <value>&lt;p id="username" class="text"&gt;&lt;/p&gt;</value>
  </data>
  <data name="OverlayPositionedItemDefaultCSS" xml:space="preserve">
    <value>.maindiv {
    position: absolute;
    width: 100%;
    max-width: 100%;
    min-width: 100%;
    height: 100%;
    max-height: 100%;
    min-height: 100%;
    margin: 0px;
    z-index: {Layer};
}

.contentdiv {
    position: absolute;
    margin: 0px;
    left: {XPosition}{PositionType};
    top: {YPosition}{PositionType};
    transform: translate({XTranslation}%, {YTranslation}%);
    width: {Width};
    height: {Height};
}</value>
  </data>
  <data name="OverlayPositionedItemDefaultHTML" xml:space="preserve">
    <value>&lt;div id="maindiv" class="maindiv"&gt;
&lt;div id="contentdiv" class="contentdiv"&gt;

{InnerHTML}

&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="OverlayTextDefaultCSS" xml:space="preserve">
    <value>.text {
    font-size: {FontSize}px;
    color: {FontColor};
    font-family: '{FontFamily}';
    font-weight: {FontWeight};
    text-decoration: {TextDecoration};
    font-style: {FontStyle};
    text-align: {TextAlignment};
    text-shadow: {Shadow};
    margin-block-start: 0px;
    margin-block-end: 0px;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
}</value>
  </data>
  <data name="OverlayTextDefaultHTML" xml:space="preserve">
    <value>&lt;p id="text" class="text"&gt;
    {Text}
&lt;/p&gt;</value>
  </data>
  <data name="OverlayTimerDefaultHTML" xml:space="preserve">
    <value>&lt;p id="text" class="text"&gt;
    {Text}
&lt;/p&gt;</value>
  </data>
  <data name="OverlayTimerDefaultJavascript" xml:space="preserve">
    <value>var additionalTime = 0;

function timerLoop(totalSeconds, endingSeconds, displayFormat)
{
    totalSeconds += additionalTime;
    additionalTime = 0;

    var text = displayFormat;

    var seconds = totalSeconds % 60;
    if (seconds &lt; 10) { seconds = "0" + seconds }
    text = text.replace("SS", totalSeconds);
    text = text.replace("ss", seconds);

    var totalMinutes = Math.floor(totalSeconds / 60);
    var minutes = totalMinutes % 60;
    if (minutes &lt; 10) { minutes = "0" + minutes }
    text = text.replace("MM", totalMinutes);
    text = text.replace("mm", minutes);

    var totalHours = Math.floor(totalMinutes / 60);
    var hours = totalHours % 24;
    if (hours &lt; 10) { hours = "0" + hours }
    text = text.replace("HH", totalHours);
    text = text.replace("hh", hours);

    var days = Math.floor(totalHours / 24);
    text = text.replace("DD", hours);

    document.getElementById("text").innerHTML = text;

    setTimeout(function () {
        if (endingSeconds &gt; 0) {
            totalSeconds++;
            if (totalSeconds &lt; endingSeconds) {
                timerLoop(totalSeconds, endingSeconds, displayFormat);
            }        
        }
        else {
            totalSeconds--;
            if (totalSeconds &gt;= 0) {
                timerLoop(totalSeconds, endingSeconds, displayFormat);
            }
        }
    }, 1000);
}

function adjustTime(time)
{
    additionalTime += time;
}

if ({CountUp}) {
    timerLoop(0, {Duration}, "{DisplayFormat}");  
}
else {
    timerLoop({Duration}, 0, "{DisplayFormat}");
}</value>
  </data>
  <data name="OverlayTwitchClipDefaultCSS" xml:space="preserve">
    <value>.clip {
    border: 0px;
}</value>
  </data>
  <data name="OverlayTwitchClipDefaultHTML" xml:space="preserve">
    <value>&lt;iframe id="clip" class="clip" width="{ClipWidth}" height="{ClipHeight}"&gt;&lt;/iframe&gt;</value>
  </data>
  <data name="OverlayTwitchClipDefaultJavascript" xml:space="preserve">
    <value>var clip = document.getElementById("clip");
clip.setAttribute("src", "https://clips.twitch.tv/embed?parent=" + window.location.hostname + "&amp;autoplay=true&amp;muted=false&amp;clip={ClipID}");</value>
  </data>
  <data name="OverlayVideoDefaultCSS" xml:space="preserve">
    <value>.video {
    width: {Width};
    height: {Height};
}</value>
  </data>
  <data name="OverlayVideoDefaultHTML" xml:space="preserve">
    <value>&lt;video id="video" class="video" onloadstart="this.volume={Volume}" allow="autoplay; encrypted-media" autoplay {Loop}&gt;
    &lt;source src="{FilePath}" type="video/{VideoExtension}" /&gt;
&lt;/video&gt;</value>
  </data>
  <data name="OverlayWebPageDefaultHTML" xml:space="preserve">
    <value>&lt;iframe frameborder="0" width="{WIDTH}" height="{HEIGHT}" src="{URL}" /&gt;</value>
  </data>
  <data name="OverlayYouTubeDefaultCSS" xml:space="preserve">
    <value>.youtubeVideo {

}</value>
  </data>
  <data name="OverlayYouTubeDefaultHTML" xml:space="preserve">
    <value>&lt;div id="youtube-{ID}" class="youtubeVideo" /&gt;</value>
  </data>
  <data name="OverlayYouTubeDefaultJavascript" xml:space="preserve">
    <value>function onYouTubeIframeAPIReady() {
    var youtubeVideoPlayer = new YT.Player("youtube-{ID}", {
        height: {HeightNumber},
        width: {WidthNumber},
        videoId: '{VideoID}',
        playerVars: { 'controls': 0, 'modestbranding': 1, 'start': {StartTime} },
        events: {
            'onReady': function () {
                youtubeVideoPlayer.setVolume({Volume});
                youtubeVideoPlayer.setLoop(false);
                youtubeVideoPlayer.frameBorder = 0;
                youtubeVideoPlayer.playVideo();
            },
            'onStateChange': function (event) {
                if (event.data == YT.PlayerState.ENDED) {
                    event.target.destroy();
                }
            }
        }
    });
}

var youtubePlayerScript = document.createElement('script');
youtubePlayerScript.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(youtubePlayerScript, firstScriptTag);</value>
  </data>
</root>